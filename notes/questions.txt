--- Unsolved ---

Why are virtual addresses of different size to physical addresses?
In sv39 virtual address size is 39 bits while physical address size is 56 bits

When using indirect kernel page tables, how do we create new page tables?
Problem is that we do not have access to physical addresses (do we just use
some base offset / mask for translating va to pa in software?)


--- Solved ---

How to enter VAS with non direct mapping?
  Maybe use temporary direct mapping and change values of all relevant registers
  Another option is to initialize satp and kernel page table before transitioning
  to supervisor mode (probably the best solution)
  (xv6 uses direct mapping - va: 0x1000 -> pa: 0x1000)
  (I would like - va: 0x1000 -> pa: 0x7000000)
Why is this even difficult?
  upon writing to satp every accessed address is translated. This also includes
  instruction fetches. Now imagine that you map .text to some va (!= pa).
  writing to satp in such state will cause an exception since pc points to
  instruction after 'csrw x_, satp', but .text section is now somewhere else.

Memory lookup triggers page table walk. But walking page tables requires memory lookups.
How to avoid such infinite recursion?
  a. hope that TLB has the necessary translations (unreliable)
  b. use physical addresses with no translation when walking page tables
     This is even defined in risc-v privileged spec (check out PTE field)

When H extension is enabled, do we control 3 seperate registers for status
(vsstatus, hstatus, sstatus) or are sstatus and hstatus equal?
  sstatus is just a masked mstatus, whereas hstatus and vsstatus are completely
  seperate registers (so we only have mstatus, hstatus and vsstatus registers)

where is V bit? (virtualization bit)
  Check out hypervisor MSTATUS_SPV (supervisor previous virtualization mode)
  works the same way as MSTATUS_MPP (machine previous privilege mode)

Software interrupt vs exception_ECALL_FROM_U_MODE
  software interrupt is IPI (inter-hart interrupt)
  ecall from X-mode happens when ecall instruction is executed on current hart

Why can medeleg have EXC_ECALL_FROM_M bit set?
This would imply that supervisor software handles M-mode ecalls
  In qemu-virt setting medeleg.EXC_ECALL_FROM_M does not delegate M-mode ecalls
  to supervisor mode (still handled in mtrapvec)
  So it has no effect on the execution (probably should be read-only 0)
