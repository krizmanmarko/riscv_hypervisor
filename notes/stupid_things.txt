This document shows pretty some obscure situations where assumed
behaviour did not match reality. It also provides examples on how
this bit me in the ass.


===========================
Is char signed or unsigned?
===========================

Depends on the compiler...
my riscv64 gnu toolchain's default char is unsigned
my x86_64 linux gnu toolchain's default char is signed
(note: int is always signed)

typedef char int8;	<- is actually uint8


=====================================
Providing a symbol from linker script
=====================================

* and [] do not work the same way.
Following examples show correct usage of symbols defined in linker script:

extern type symbol_name_start;
extern type symbol_name_end;
size_t size = &symbol_name_end - &symbol_name_start;

extern type symbol_name_start[];
extern type symbol_name_end[];
size_t size = symbol_name_end - symbol_name_start;

extern type *symbol_name_start;
extern type *symbol_name_end;
size_t size = &symbol_name_end - &symbol_name_start;


=================
hgatp page tables
=================

1. Sv39x4 just adds 2 bits to the virtual address, but in order to account
   for such change root page table must be 4 * larger and aligned to 16KB

2. ptes in this page table must be marked with PTE_U flag


==================
syntax was correct
==================

Could not get line 6 to execute. But why?
...
1	va = (uint64) text;
2	pa = KVA2PA((uint64) text);
3	size = (unsigned int) (etext - text);
4	while (map_pages(root, va, pa, size, PTE_R | PTE_X | PTE_G))
5
6	va = (uint64) rodata;
7	pa = KVA2PA((uint64) rodata);
8	size = (unsigned int) (erodata - rodata);
9	while (map_pages(root, va, pa, size, PTE_R | PTE_G));
...

It turns out I forgot to add semicolon at the end of while on line 4
